<?xml version="1.0"?>

<bindings xmlns="http://www.mozilla.org/xbl"
          xmlns:xbl="http://www.mozilla.org/xbl"
          xmlns:xul="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul">

    <!-- Firebug start button is available in a 'Customize Toolbar' dialog with support
         for error badge that displays number of errors on the current page (if any) -->
    <binding id="start-button" display="xul:menu" extends="chrome://global/content/bindings/toolbarbutton.xml#menu">

        <content>
            <children includes="observes|template|menupopup|panel|tooltip"/>
            <xul:image class="toolbarbutton-icon" xbl:inherits="validate,src=image,label,type"/>
            <xul:label class="toolbarbutton-text" value="1231" crop="right" flex="1" xbl:inherits="value=label,accesskey,crop,dragover-top"/>
            <xul:stack class="badge">
                <xul:label class="label" value="0" xbl:inherits="value=countBlocked"/>
            </xul:stack>
            <!--<xul:dropmarker type="menu" class="toolbarbutton-menu-dropmarker" xbl:inherits="disabled,label"/>-->
        </content>

    </binding>

    <!-- Most of this is copied from the arrowpanel binding in popup.xml -->
    <binding id="places-popup-arrow"
             extends="chrome://browser/content/places/menu.xml#places-popup-base">
        <content flip="both" side="top">
            <xul:vbox anonid="container" class="panel-arrowcontainer" flex="1"
                      xbl:inherits="side,panelopen">
                <xul:box anonid="arrowbox" class="panel-arrowbox">
                    <xul:image anonid="arrow" class="panel-arrow" xbl:inherits="side"/>
                </xul:box>
                <xul:box class="panel-arrowcontent" xbl:inherits="side,align,dir,orient,pack" flex="1">
                    <xul:vbox class="menupopup-drop-indicator-bar" hidden="true">
                        <xul:image class="menupopup-drop-indicator" mousethrough="always"/>
                    </xul:vbox>
                    <xul:arrowscrollbox class="popup-internal-box" flex="1" orient="vertical"
                                        smoothscroll="false">
                        <children/>
                    </xul:arrowscrollbox>
                </xul:box>
            </xul:vbox>
        </content>

        <implementation>
            <constructor><![CDATA[
                    this.style.pointerEvents = 'none';
                ]]></constructor>
            <method name="adjustArrowPosition">
                <body><![CDATA[
                        var arrow = document.getAnonymousElementByAttribute(this, "anonid", "arrow");

                        var anchor = this.anchorNode;
                        if (!anchor) {
                            arrow.hidden = true;
                            return;
                        }

                        var container = document.getAnonymousElementByAttribute(this, "anonid", "container");
                        var arrowbox = document.getAnonymousElementByAttribute(this, "anonid", "arrowbox");

                        var position = this.alignmentPosition;
                        var offset = this.alignmentOffset;
                        // if this panel has a "sliding" arrow, we may have previously set margins...
                        arrowbox.style.removeProperty("transform");
                        if (position.indexOf("start_") == 0 || position.indexOf("end_") == 0) {
                            container.orient = "horizontal";
                            arrowbox.orient = "vertical";
                            if (position.indexOf("_after") > 0) {
                                arrowbox.pack = "end";
                            } else {
                                arrowbox.pack = "start";
                            }
                            arrowbox.style.transform = "translate(0, " + -offset + "px)";

                            // The assigned side stays the same regardless of direction.
                            var isRTL = (window.getComputedStyle(this).direction == "rtl");

                            if (position.indexOf("start_") == 0) {
                                container.dir = "reverse";
                                this.setAttribute("side", isRTL ? "left" : "right");
                            }
                            else {
                                container.dir = "";
                                this.setAttribute("side", isRTL ? "right" : "left");
                            }
                        }
                        else if (position.indexOf("before_") == 0 || position.indexOf("after_") == 0) {
                            container.orient = "";
                            arrowbox.orient = "";
                            if (position.indexOf("_end") > 0) {
                                arrowbox.pack = "end";
                            } else {
                                arrowbox.pack = "start";
                            }
                            arrowbox.style.transform = "translate(" + -offset + "px, 0)";

                            if (position.indexOf("before_") == 0) {
                                container.dir = "reverse";
                                this.setAttribute("side", "bottom");
                            }
                            else {
                                container.dir = "";
                                this.setAttribute("side", "top");
                            }
                        }

                        arrow.hidden = false;
                    ]]></body>
            </method>
        </implementation>

        <handlers>
            <handler event="popupshowing" phase="target"><![CDATA[
                    this.adjustArrowPosition();
                ]]></handler>
            <handler event="popupshown" phase="target"><![CDATA[
                    this.setAttribute("panelopen", "true");
                    let disablePointerEvents;
                    if (!this.hasAttribute("disablepointereventsfortransition")) {
                        let container = document.getAnonymousElementByAttribute(this, "anonid", "container");
                        let cs = getComputedStyle(container);
                        let transitionProp = cs.transitionProperty;
                        let transitionTime = parseFloat(cs.transitionDuration);
                        disablePointerEvents = (transitionProp.contains("transform") ||
                                transitionProp == "all") &&
                                transitionTime > 0;
                        this.setAttribute("disablepointereventsfortransition", disablePointerEvents);
                    } else {
                        disablePointerEvents = this.getAttribute("disablepointereventsfortransition") == "true";
                    }
                    if (!disablePointerEvents) {
                        this.style.removeProperty("pointer-events");
                    }
                ]]></handler>
            <handler event="transitionend"><![CDATA[
                    if (event.originalTarget.getAttribute("anonid") == "container" &&
                            event.propertyName == "transform") {
                        this.style.removeProperty("pointer-events");
                    }
                ]]></handler>
            <handler event="popuphidden" phase="target"><![CDATA[
                    this.removeAttribute("panelopen");
                    if (this.getAttribute("disablepointereventsfortransition") == "true") {
                        this.style.pointerEvents = 'none';
                    }
                ]]></handler>
        </handlers>
    </binding>

</bindings>
